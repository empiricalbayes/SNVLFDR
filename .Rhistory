if (is.null(error)){
M_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Alt))
M_C=as.numeric(as.character(x.filtered$Ct.Alt))
Alt1_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Alt1))
Alt1_C=as.numeric(as.character(x.filtered$Ct.Alt1))
Alt2_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Alt2))
Alt2_C=as.numeric(as.character(x.filtered$Ct.Alt2))
R_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Ref))
R_C=as.numeric(as.character(x.filtered$Ct.Ref))
error=10^(-((M_BQ*M_C + Alt1_BQ*Alt1_C  + Alt2_BQ*Alt2_C  + R_BQ*R_C)/(M_C+Alt1_C+Alt2_C+R_C))/10)
}
x<-cbind(x.filtered,error)
R<-as.numeric(as.character(x.filtered$Ct.Ref))
M<-as.numeric(as.character(x.filtered$Ct.Alt))
X1<-as.numeric(as.character(x.filtered$Ct.Alt1))
X2<-as.numeric(as.character(x.filtered$Ct.Alt2))
pi0=1-dim(x.filtered)[1]/dim(bam_input)[1]
theta=as.numeric(as.character(x.filtered$AF))
f0<-get.f0(x =x.filtered ,what.error = error )
f1<-get.f1(x =x.filtered,theta =theta,what.error =error )
LFDRs<-(pi0*f0)/(pi0*f0+(1-pi0)*f1)
Mutant=ifelse(LFDRs>LFDR.T,0,1)
output=cbind(x.filtered,LFDRs,Mutant)
return(list('estimated.LFDRs'=LFDRs,'updated.bam'=output))
}
get_LFDRs_Given_caller(bam_input,calls,LFDR.T,error)
A0=NULL
u=unique(B$CHR)
for (i in u){
A0=rbind(A0,A[A$CHR==i & A$POS%in%B[B$CHR==i,]$POS,])
}
A0
bam_input='/Users/alikarimnezhad/Documents/Bioinformatics-OHRI/Scientific Reports/Code/LFDRSNV/inst/extdata/bam_input.csv'
calls='/Users/alikarimnezhad/Downloads/analysis/mutect2/TDNA1_filtered.vcf'
LFDR.T=0.01
error=NULL
if (is.null(LFDR.T)){LFDR.T=0.01}
A=read.csv(bam_input,sep="\t",quote = "\"",header=F,stringsAsFactors = F)
colnames(A)[1:2]=c('CHR','POS')
B=read.table(calls,fill = T)
colnames(B)[1:2]=c('CHR','POS')
A0=NULL
u=unique(B$CHR)
for (i in u){
A0=rbind(A0,A[A$CHR==i & A$POS%in%B[B$CHR==i,]$POS,])
}
A0
if(is.null(A0)){print('gndgn')}
is.null(A0)
dim(A0)[1]
if(dim(A0)[1]==0){print('gndgn')}
get_LFDRs_Given_caller<-function(bam_input,calls,LFDR.T,error){
if (is.null(LFDR.T)){LFDR.T=0.01}
A=read.csv(bam_input,sep="\t",quote = "\"",header=F,stringsAsFactors = F)
colnames(A)[1:2]=c('CHR','POS')
B=read.table(calls,fill = T)
colnames(B)[1:2]=c('CHR','POS')
A0=NULL
u=unique(B$CHR)
for (i in u){
A0=rbind(A0,A[A$CHR==i & A$POS%in%B[B$CHR==i,]$POS,])
}
if(dim(A0)[1]==0){print('no CHR and postion no. was found in bam_input')}
Prepare_LFDR_input<-function(Input){
index<-c()
Allele1<-Ct1<-Ave.Map.Q1<-Ave.Base.Q1<-Ct.Plus.Str.1<-Ct.Mns.Str.1<-c()
Allele2<-Ct2<-Ave.Map.Q2<-Ave.Base.Q2<-Ct.Plus.Str.2<-Ct.Mns.Str.2<-c()
Allele3<-Ct3<-Ave.Map.Q3<-Ave.Base.Q3<-Ct.Plus.Str.3<-Ct.Mns.Str.3<-c()
Allele4<-Ct4<-Ave.Map.Q4<-Ave.Base.Q4<-Ct.Plus.Str.4<-Ct.Mns.Str.4<-c()
Allele5<-Ct5<-Ave.Map.Q5<-Ave.Base.Q5<-Ct.Plus.Str.5<-Ct.Mns.Str.5<-c()
for ( i in 1:dim(Input)[1]){
# for ( i in 1:10000){
if (nchar(as.character(Input[i,10]))>0){
Allele1<-c(Allele1,unlist(strsplit(Input[i,6], ":"))[1])
Ct1<-c(Ct1,unlist(strsplit(Input[i,6], ":"))[2])
Ave.Map.Q1<-c(Ave.Map.Q1,unlist(strsplit(Input[i,6], ":"))[3])
Ave.Base.Q1<-c(Ave.Base.Q1,unlist(strsplit(Input[i,6], ":"))[4])
Ct.Plus.Str.1<-c(Ct.Plus.Str.1,unlist(strsplit(Input[i,6], ":"))[6])
Ct.Mns.Str.1<-c(Ct.Mns.Str.1,unlist(strsplit(Input[i,6], ":"))[7])
Allele2<-c(Allele2,unlist(strsplit(Input[i,7], ":"))[1])
Ct2<-c(Ct2,unlist(strsplit(Input[i,7], ":"))[2])
Ave.Map.Q2<-c(Ave.Map.Q2,unlist(strsplit(Input[i,7], ":"))[3])
Ave.Base.Q2<-c(Ave.Base.Q2,unlist(strsplit(Input[i,7], ":"))[4])
Ct.Plus.Str.2<-c(Ct.Plus.Str.2,unlist(strsplit(Input[i,7], ":"))[6])
Ct.Mns.Str.2<-c(Ct.Mns.Str.2,unlist(strsplit(Input[i,7], ":"))[7])
Allele3<-c(Allele3,unlist(strsplit(Input[i,8], ":"))[1])
Ct3<-c(Ct3,unlist(strsplit(Input[i,8], ":"))[2])
Ave.Map.Q3<-c(Ave.Map.Q3,unlist(strsplit(Input[i,8], ":"))[3])
Ave.Base.Q3<-c(Ave.Base.Q3,unlist(strsplit(Input[i,8], ":"))[4])
Ct.Plus.Str.3<-c(Ct.Plus.Str.3,unlist(strsplit(Input[i,8], ":"))[6])
Ct.Mns.Str.3<-c(Ct.Mns.Str.3,unlist(strsplit(Input[i,8], ":"))[7])
Allele4<-c(Allele4,unlist(strsplit(Input[i,9], ":"))[1])
Ct4<-c(Ct4,unlist(strsplit(Input[i,9], ":"))[2])
Ave.Map.Q4<-c(Ave.Map.Q4,unlist(strsplit(Input[i,9], ":"))[3])
Ave.Base.Q4<-c(Ave.Base.Q4,unlist(strsplit(Input[i,9], ":"))[4])
Ct.Plus.Str.4<-c(Ct.Plus.Str.4,unlist(strsplit(Input[i,9], ":"))[6])
Ct.Mns.Str.4<-c(Ct.Mns.Str.4,unlist(strsplit(Input[i,9], ":"))[7])
Allele5<-c(Allele5,unlist(strsplit(Input[i,10], ":"))[1])
Ct5<-c(Ct5,unlist(strsplit(Input[i,10], ":"))[2])
Ave.Map.Q5<-c(Ave.Map.Q5,unlist(strsplit(Input[i,10], ":"))[3])
Ave.Base.Q5<-c(Ave.Base.Q5,unlist(strsplit(Input[i,10], ":"))[4])
Ct.Plus.Str.5<-c(Ct.Plus.Str.5,unlist(strsplit(Input[i,10], ":"))[6])
Ct.Mns.Str.5<-c(Ct.Mns.Str.5,unlist(strsplit(Input[i,10], ":"))[7])
index<-c(index,i)
}
}
Ideal.Mx<-cbind(Input[index,1:4],
as.character(Allele1),as.numeric(as.character(Ct1)),as.numeric(as.character(Ave.Map.Q1)),
as.numeric(as.character(Ave.Base.Q1)),as.numeric(as.character(Ct.Plus.Str.1)),
as.numeric(as.character(Ct.Mns.Str.1)),
Allele2,as.numeric(as.character(Ct2)),as.numeric(as.character(Ave.Map.Q2)),
as.numeric(as.character(Ave.Base.Q2)),as.numeric(as.character(Ct.Plus.Str.2)),
as.numeric(as.character(Ct.Mns.Str.2)),
Allele3,as.numeric(as.character(Ct3)),as.numeric(as.character(Ave.Map.Q3)),
as.numeric(as.character(Ave.Base.Q3)),as.numeric(as.character(Ct.Plus.Str.3)),
as.numeric(as.character(Ct.Mns.Str.3)),
Allele4,as.numeric(as.character(Ct4)),as.numeric(as.character(Ave.Map.Q4)),
as.numeric(as.character(Ave.Base.Q4)),as.numeric(as.character(Ct.Plus.Str.4)),
as.numeric(as.character(Ct.Mns.Str.4)),
Allele5,as.numeric(as.character(Ct5)),as.numeric(as.character(Ave.Map.Q5)),
as.numeric(as.character(Ave.Base.Q5)),as.numeric(as.character(Ct.Plus.Str.5)),
as.numeric(as.character(Ct.Mns.Str.5)))
J=droplevels(Ideal.Mx)
colnames(Ideal.Mx)<-c('CHR','POS','Ref','Total',
'Allele1','Ct1','Ave.Map.Q1','Ave.Base.Q1','Ct.Plus.Str.1','Ct.Mns.Str.1',
'Allele2','Ct2','Ave.Map.Q2','Ave.Base.Q2','Ct.Plus.Str.2','Ct.Mns.Str.2',
'Allele3','Ct3','Ave.Map.Q3','Ave.Base.Q3','Ct.Plus.Str.3','Ct.Mns.Str.3',
'Allele4','Ct4','Ave.Map.Q4','Ave.Base.Q4','Ct.Plus.Str.4','Ct.Mns.Str.4',
'Allele5','Ct5','Ave.Map.Q5','Ave.Base.Q5','Ct.Plus.Str.5','Ct.Mns.Str.5' )
I<-Ideal.Mx
I[which(!as.character(I[,3])%in%c('A','C','G','T')),'Ref']<-toupper(as.character(I[which(!as.character(I[,3])%in%c('A','C','G','T')),3]))
I$Total<-as.numeric(as.character(I$Ct1))+as.numeric(as.character(I$Ct2))+as.numeric(as.character(I$Ct3))+as.numeric(as.character(I$Ct4))
x<-c()
ideal.col<-c(5,11,17,23)
for ( i in 1:dim(I)[1]){
#  for ( i in 1:10){
#print(i)
j.Ref<-j.nonRef<-c()
#for ( i in 1:10){
for ( j in ideal.col){
if (I[i,j]==I[i,3]){
j.Ref<-j}
else{
j.nonRef<-ideal.col[!ideal.col%in%j.Ref]
}
}
L.Ref<-cbind(as.character(I[i,c(j.Ref)]),I[i,c(j.Ref+1)],I[i,c(j.Ref+2)],I[i,c(j.Ref+3)],I[i,c(j.Ref+4)],I[i,c(j.Ref+5)])
Alt.counts=c(I[i,c(j.nonRef[1]+1)],I[i,c(j.nonRef[2]+1)],I[i,c(j.nonRef[3]+1)])
w01<-which(Alt.counts==max(Alt.counts))
w02<-which(Alt.counts!=max(Alt.counts))
if (length(w01)==1){
w_alt=w01
w_alts=w02
} else if (length(w01)==2){
w_alt=w01[1]
w_alts<-c(w01[2],w02)
} else if (length(w01)==3){
w_alt=w01[1]
w_alts<-c(w01[2],w01[3])
}
L.Alt<-c(as.character(I[i,j.nonRef[w_alt]]),I[i,j.nonRef[w_alt]+1],I[i,j.nonRef[w_alt]+2],I[i,j.nonRef[w_alt]+3],I[i,j.nonRef[w_alt]+4],I[i,j.nonRef[w_alt]+5])
L.Alt1<-c(as.character(I[i,j.nonRef[w_alts[1]]]),I[i,j.nonRef[w_alts[1]]+1],I[i,j.nonRef[w_alts[1]]+2],I[i,j.nonRef[w_alts[1]]+3],I[i,j.nonRef[w_alts[1]]+4],I[i,j.nonRef[w_alts[1]]+5])
L.Alt2<-c(as.character(I[i,j.nonRef[w_alts[2]]]),I[i,j.nonRef[w_alts[2]]+1],I[i,j.nonRef[w_alts[2]]+2],I[i,j.nonRef[w_alts[2]]+3],I[i,j.nonRef[w_alts[2]]+4],I[i,j.nonRef[w_alts[2]]+5])
x<-rbind(x,c(I[i,1],I[i,2],L.Ref,L.Alt,L.Alt1,L.Alt2))
}
#x<-cbind(x,I$Total)
colnames(x)<-c('CHR','POS','Ref','Ct.Ref','Ave.Map.Q.Ref','Ave.Base.Q.Ref','Ct.Plus.Ref.Str.1','Ct.Plus.Ref.Str.2',
'Alt','Ct.Alt','Ave.Map.Q.Alt','Ave.Base.Q.Alt','Ct.Plus.Alt.Str.1','Ct.Plus.Alt.Str.2',
'Alt1','Ct.Alt1','Ave.Map.Q.Alt1','Ave.Base.Q.Alt1','Ct.Plus.Alt1.Str.1','Ct.Plus.Alt1.Str.2',
'Alt2','Ct.Alt2','Ave.Map.Q.Alt2','Ave.Base.Q.Alt2','Ct.Plus.Alt2.Str.1','Ct.Plus.Alt2.Str.2')
Depth<-as.numeric(as.character(x[,'Ct.Ref']))+as.numeric(as.character(x[,'Ct.Alt']))+as.numeric(as.character(x[,'Ct.Alt1']))+as.numeric(as.character(x[,'Ct.Alt2']))
#1st definition
#AF<-as.numeric(x[,'Ct.Alt'])/Depth
#2nd definition
AF<-as.numeric(x[,'Ct.Alt'])/(as.numeric(x[,'Ct.Alt'])+as.numeric(x[,'Ct.Ref']))
x<-cbind(x,Depth,AF)
#x<-noquote(x)
#x[1:8,]
C<-data.frame(x)
D<-noquote(C)
x.e<-D
x.e[3,]
dim(x.e)
return(x.e)
}
D=Prepare_LFDR_input(Input=A0)
D_noduplicated<-D[!duplicated(D),]
get.f1<-function(x,theta,what.error){
R<-as.numeric(as.character(x$Ct.Ref))
M<-as.numeric(as.character(x$Ct.Alt))
X1<-as.numeric(as.character(x$Ct.Alt1))
X2<-as.numeric(as.character(x$Ct.Alt2))
x<-cbind(R,M,X1,X2)
error=what.error
f1.all<-sapply(1:dim(x)[1], function (j) {mean(sapply(1:length(theta), function(k) {stats::dmultinom(x[j,], size = NULL,prob=c(theta[k]*(error[j]/3)+(1-theta[k])*(1-error[j]),theta[k]*(1-error[j])+(1-theta[k])*error[j]/3,error[j]/3,error[j]/3),log = FALSE)}))})
return(f1.all)
}
get.f0<-function(x,what.error){
R<-as.numeric(as.character(x$Ct.Ref))
M<-as.numeric(as.character(x$Ct.Alt))
X1<-as.numeric(as.character(x$Ct.Alt1))
X2<-as.numeric(as.character(x$Ct.Alt2))
x<-cbind(R,M,X1,X2)
probs_0=cbind(1-what.error,what.error/3,what.error/3,what.error/3)
f0.all<-sapply(1:dim(x)[1], function(j) {stats::dmultinom(x[j,], size = NULL, prob=probs_0[j,], log = FALSE)})
return(f0.all)
}
x.filtered=D_noduplicated
if (is.null(error)){
M_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Alt))
M_C=as.numeric(as.character(x.filtered$Ct.Alt))
Alt1_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Alt1))
Alt1_C=as.numeric(as.character(x.filtered$Ct.Alt1))
Alt2_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Alt2))
Alt2_C=as.numeric(as.character(x.filtered$Ct.Alt2))
R_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Ref))
R_C=as.numeric(as.character(x.filtered$Ct.Ref))
error=10^(-((M_BQ*M_C + Alt1_BQ*Alt1_C  + Alt2_BQ*Alt2_C  + R_BQ*R_C)/(M_C+Alt1_C+Alt2_C+R_C))/10)
}
x<-cbind(x.filtered,error)
R<-as.numeric(as.character(x.filtered$Ct.Ref))
M<-as.numeric(as.character(x.filtered$Ct.Alt))
X1<-as.numeric(as.character(x.filtered$Ct.Alt1))
X2<-as.numeric(as.character(x.filtered$Ct.Alt2))
pi0=1-dim(x.filtered)[1]/dim(bam_input)[1]
theta=as.numeric(as.character(x.filtered$AF))
f0<-get.f0(x =x.filtered ,what.error = error )
f1<-get.f1(x =x.filtered,theta =theta,what.error =error )
LFDRs<-(pi0*f0)/(pi0*f0+(1-pi0)*f1)
Mutant=ifelse(LFDRs>LFDR.T,0,1)
output=cbind(x.filtered,LFDRs,Mutant)
return(list('estimated.LFDRs'=LFDRs,'updated.bam'=output))
}
get_LFDRs_Given_caller(bam_input,calls,LFDR.T,error)
A
B=read.table(calls,fill = T)
colnames(B)[1:2]=c('CHR','POS')
A0=NULL
u=unique(B$CHR)
for (i in u){
A0=rbind(A0,A[A$CHR==i & A$POS%in%B[B$CHR==i,]$POS,])
}
A0
A=read.table('/Users/alikarimnezhad/Downloads/analysis/bam-readcount/TDNA24e.txt',fill = T)
#A=read.csv('/Users/alikarimnezhad/Documents/Bioinformatics-OHRI/Scientific Reports/Code/LFDRSNV/inst/extdata/bam_input.csv',sep="\t",quote = "\"",header=F,stringsAsFactors = F)
head(A)
colnames(A)[1:2]=c('CHR','POS')
B=read.table(calls,fill = T)
colnames(B)[1:2]=c('CHR','POS')
A0=NULL
u=unique(B$CHR)
for (i in u){
A0=rbind(A0,A[A$CHR==i & A$POS%in%B[B$CHR==i,]$POS,])
}
A0
if(dim(A0)[1]==0){print('no CHR and postion no. was found in bam_input')}
Prepare_LFDR_input<-function(Input){
index<-c()
Allele1<-Ct1<-Ave.Map.Q1<-Ave.Base.Q1<-Ct.Plus.Str.1<-Ct.Mns.Str.1<-c()
Allele2<-Ct2<-Ave.Map.Q2<-Ave.Base.Q2<-Ct.Plus.Str.2<-Ct.Mns.Str.2<-c()
Allele3<-Ct3<-Ave.Map.Q3<-Ave.Base.Q3<-Ct.Plus.Str.3<-Ct.Mns.Str.3<-c()
Allele4<-Ct4<-Ave.Map.Q4<-Ave.Base.Q4<-Ct.Plus.Str.4<-Ct.Mns.Str.4<-c()
Allele5<-Ct5<-Ave.Map.Q5<-Ave.Base.Q5<-Ct.Plus.Str.5<-Ct.Mns.Str.5<-c()
for ( i in 1:dim(Input)[1]){
# for ( i in 1:10000){
if (nchar(as.character(Input[i,10]))>0){
Allele1<-c(Allele1,unlist(strsplit(Input[i,6], ":"))[1])
Ct1<-c(Ct1,unlist(strsplit(Input[i,6], ":"))[2])
Ave.Map.Q1<-c(Ave.Map.Q1,unlist(strsplit(Input[i,6], ":"))[3])
Ave.Base.Q1<-c(Ave.Base.Q1,unlist(strsplit(Input[i,6], ":"))[4])
Ct.Plus.Str.1<-c(Ct.Plus.Str.1,unlist(strsplit(Input[i,6], ":"))[6])
Ct.Mns.Str.1<-c(Ct.Mns.Str.1,unlist(strsplit(Input[i,6], ":"))[7])
Allele2<-c(Allele2,unlist(strsplit(Input[i,7], ":"))[1])
Ct2<-c(Ct2,unlist(strsplit(Input[i,7], ":"))[2])
Ave.Map.Q2<-c(Ave.Map.Q2,unlist(strsplit(Input[i,7], ":"))[3])
Ave.Base.Q2<-c(Ave.Base.Q2,unlist(strsplit(Input[i,7], ":"))[4])
Ct.Plus.Str.2<-c(Ct.Plus.Str.2,unlist(strsplit(Input[i,7], ":"))[6])
Ct.Mns.Str.2<-c(Ct.Mns.Str.2,unlist(strsplit(Input[i,7], ":"))[7])
Allele3<-c(Allele3,unlist(strsplit(Input[i,8], ":"))[1])
Ct3<-c(Ct3,unlist(strsplit(Input[i,8], ":"))[2])
Ave.Map.Q3<-c(Ave.Map.Q3,unlist(strsplit(Input[i,8], ":"))[3])
Ave.Base.Q3<-c(Ave.Base.Q3,unlist(strsplit(Input[i,8], ":"))[4])
Ct.Plus.Str.3<-c(Ct.Plus.Str.3,unlist(strsplit(Input[i,8], ":"))[6])
Ct.Mns.Str.3<-c(Ct.Mns.Str.3,unlist(strsplit(Input[i,8], ":"))[7])
Allele4<-c(Allele4,unlist(strsplit(Input[i,9], ":"))[1])
Ct4<-c(Ct4,unlist(strsplit(Input[i,9], ":"))[2])
Ave.Map.Q4<-c(Ave.Map.Q4,unlist(strsplit(Input[i,9], ":"))[3])
Ave.Base.Q4<-c(Ave.Base.Q4,unlist(strsplit(Input[i,9], ":"))[4])
Ct.Plus.Str.4<-c(Ct.Plus.Str.4,unlist(strsplit(Input[i,9], ":"))[6])
Ct.Mns.Str.4<-c(Ct.Mns.Str.4,unlist(strsplit(Input[i,9], ":"))[7])
Allele5<-c(Allele5,unlist(strsplit(Input[i,10], ":"))[1])
Ct5<-c(Ct5,unlist(strsplit(Input[i,10], ":"))[2])
Ave.Map.Q5<-c(Ave.Map.Q5,unlist(strsplit(Input[i,10], ":"))[3])
Ave.Base.Q5<-c(Ave.Base.Q5,unlist(strsplit(Input[i,10], ":"))[4])
Ct.Plus.Str.5<-c(Ct.Plus.Str.5,unlist(strsplit(Input[i,10], ":"))[6])
Ct.Mns.Str.5<-c(Ct.Mns.Str.5,unlist(strsplit(Input[i,10], ":"))[7])
index<-c(index,i)
}
}
Ideal.Mx<-cbind(Input[index,1:4],
as.character(Allele1),as.numeric(as.character(Ct1)),as.numeric(as.character(Ave.Map.Q1)),
as.numeric(as.character(Ave.Base.Q1)),as.numeric(as.character(Ct.Plus.Str.1)),
as.numeric(as.character(Ct.Mns.Str.1)),
Allele2,as.numeric(as.character(Ct2)),as.numeric(as.character(Ave.Map.Q2)),
as.numeric(as.character(Ave.Base.Q2)),as.numeric(as.character(Ct.Plus.Str.2)),
as.numeric(as.character(Ct.Mns.Str.2)),
Allele3,as.numeric(as.character(Ct3)),as.numeric(as.character(Ave.Map.Q3)),
as.numeric(as.character(Ave.Base.Q3)),as.numeric(as.character(Ct.Plus.Str.3)),
as.numeric(as.character(Ct.Mns.Str.3)),
Allele4,as.numeric(as.character(Ct4)),as.numeric(as.character(Ave.Map.Q4)),
as.numeric(as.character(Ave.Base.Q4)),as.numeric(as.character(Ct.Plus.Str.4)),
as.numeric(as.character(Ct.Mns.Str.4)),
Allele5,as.numeric(as.character(Ct5)),as.numeric(as.character(Ave.Map.Q5)),
as.numeric(as.character(Ave.Base.Q5)),as.numeric(as.character(Ct.Plus.Str.5)),
as.numeric(as.character(Ct.Mns.Str.5)))
J=droplevels(Ideal.Mx)
colnames(Ideal.Mx)<-c('CHR','POS','Ref','Total',
'Allele1','Ct1','Ave.Map.Q1','Ave.Base.Q1','Ct.Plus.Str.1','Ct.Mns.Str.1',
'Allele2','Ct2','Ave.Map.Q2','Ave.Base.Q2','Ct.Plus.Str.2','Ct.Mns.Str.2',
'Allele3','Ct3','Ave.Map.Q3','Ave.Base.Q3','Ct.Plus.Str.3','Ct.Mns.Str.3',
'Allele4','Ct4','Ave.Map.Q4','Ave.Base.Q4','Ct.Plus.Str.4','Ct.Mns.Str.4',
'Allele5','Ct5','Ave.Map.Q5','Ave.Base.Q5','Ct.Plus.Str.5','Ct.Mns.Str.5' )
I<-Ideal.Mx
I[which(!as.character(I[,3])%in%c('A','C','G','T')),'Ref']<-toupper(as.character(I[which(!as.character(I[,3])%in%c('A','C','G','T')),3]))
I$Total<-as.numeric(as.character(I$Ct1))+as.numeric(as.character(I$Ct2))+as.numeric(as.character(I$Ct3))+as.numeric(as.character(I$Ct4))
x<-c()
ideal.col<-c(5,11,17,23)
for ( i in 1:dim(I)[1]){
#  for ( i in 1:10){
#print(i)
j.Ref<-j.nonRef<-c()
#for ( i in 1:10){
for ( j in ideal.col){
if (I[i,j]==I[i,3]){
j.Ref<-j}
else{
j.nonRef<-ideal.col[!ideal.col%in%j.Ref]
}
}
L.Ref<-cbind(as.character(I[i,c(j.Ref)]),I[i,c(j.Ref+1)],I[i,c(j.Ref+2)],I[i,c(j.Ref+3)],I[i,c(j.Ref+4)],I[i,c(j.Ref+5)])
Alt.counts=c(I[i,c(j.nonRef[1]+1)],I[i,c(j.nonRef[2]+1)],I[i,c(j.nonRef[3]+1)])
w01<-which(Alt.counts==max(Alt.counts))
w02<-which(Alt.counts!=max(Alt.counts))
if (length(w01)==1){
w_alt=w01
w_alts=w02
} else if (length(w01)==2){
w_alt=w01[1]
w_alts<-c(w01[2],w02)
} else if (length(w01)==3){
w_alt=w01[1]
w_alts<-c(w01[2],w01[3])
}
L.Alt<-c(as.character(I[i,j.nonRef[w_alt]]),I[i,j.nonRef[w_alt]+1],I[i,j.nonRef[w_alt]+2],I[i,j.nonRef[w_alt]+3],I[i,j.nonRef[w_alt]+4],I[i,j.nonRef[w_alt]+5])
L.Alt1<-c(as.character(I[i,j.nonRef[w_alts[1]]]),I[i,j.nonRef[w_alts[1]]+1],I[i,j.nonRef[w_alts[1]]+2],I[i,j.nonRef[w_alts[1]]+3],I[i,j.nonRef[w_alts[1]]+4],I[i,j.nonRef[w_alts[1]]+5])
L.Alt2<-c(as.character(I[i,j.nonRef[w_alts[2]]]),I[i,j.nonRef[w_alts[2]]+1],I[i,j.nonRef[w_alts[2]]+2],I[i,j.nonRef[w_alts[2]]+3],I[i,j.nonRef[w_alts[2]]+4],I[i,j.nonRef[w_alts[2]]+5])
x<-rbind(x,c(I[i,1],I[i,2],L.Ref,L.Alt,L.Alt1,L.Alt2))
}
#x<-cbind(x,I$Total)
colnames(x)<-c('CHR','POS','Ref','Ct.Ref','Ave.Map.Q.Ref','Ave.Base.Q.Ref','Ct.Plus.Ref.Str.1','Ct.Plus.Ref.Str.2',
'Alt','Ct.Alt','Ave.Map.Q.Alt','Ave.Base.Q.Alt','Ct.Plus.Alt.Str.1','Ct.Plus.Alt.Str.2',
'Alt1','Ct.Alt1','Ave.Map.Q.Alt1','Ave.Base.Q.Alt1','Ct.Plus.Alt1.Str.1','Ct.Plus.Alt1.Str.2',
'Alt2','Ct.Alt2','Ave.Map.Q.Alt2','Ave.Base.Q.Alt2','Ct.Plus.Alt2.Str.1','Ct.Plus.Alt2.Str.2')
Depth<-as.numeric(as.character(x[,'Ct.Ref']))+as.numeric(as.character(x[,'Ct.Alt']))+as.numeric(as.character(x[,'Ct.Alt1']))+as.numeric(as.character(x[,'Ct.Alt2']))
#1st definition
#AF<-as.numeric(x[,'Ct.Alt'])/Depth
#2nd definition
AF<-as.numeric(x[,'Ct.Alt'])/(as.numeric(x[,'Ct.Alt'])+as.numeric(x[,'Ct.Ref']))
x<-cbind(x,Depth,AF)
#x<-noquote(x)
#x[1:8,]
C<-data.frame(x)
D<-noquote(C)
x.e<-D
x.e[3,]
dim(x.e)
return(x.e)
}
D=Prepare_LFDR_input(Input=A0)
D
D_noduplicated<-D[!duplicated(D),]
get.f1<-function(x,theta,what.error){
R<-as.numeric(as.character(x$Ct.Ref))
M<-as.numeric(as.character(x$Ct.Alt))
X1<-as.numeric(as.character(x$Ct.Alt1))
X2<-as.numeric(as.character(x$Ct.Alt2))
x<-cbind(R,M,X1,X2)
error=what.error
f1.all<-sapply(1:dim(x)[1], function (j) {mean(sapply(1:length(theta), function(k) {stats::dmultinom(x[j,], size = NULL,prob=c(theta[k]*(error[j]/3)+(1-theta[k])*(1-error[j]),theta[k]*(1-error[j])+(1-theta[k])*error[j]/3,error[j]/3,error[j]/3),log = FALSE)}))})
return(f1.all)
}
get.f0<-function(x,what.error){
R<-as.numeric(as.character(x$Ct.Ref))
M<-as.numeric(as.character(x$Ct.Alt))
X1<-as.numeric(as.character(x$Ct.Alt1))
X2<-as.numeric(as.character(x$Ct.Alt2))
x<-cbind(R,M,X1,X2)
probs_0=cbind(1-what.error,what.error/3,what.error/3,what.error/3)
f0.all<-sapply(1:dim(x)[1], function(j) {stats::dmultinom(x[j,], size = NULL, prob=probs_0[j,], log = FALSE)})
return(f0.all)
}
x.filtered=D_noduplicated
if (is.null(error)){
M_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Alt))
M_C=as.numeric(as.character(x.filtered$Ct.Alt))
Alt1_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Alt1))
Alt1_C=as.numeric(as.character(x.filtered$Ct.Alt1))
Alt2_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Alt2))
Alt2_C=as.numeric(as.character(x.filtered$Ct.Alt2))
R_BQ=as.numeric(as.character(x.filtered$Ave.Base.Q.Ref))
R_C=as.numeric(as.character(x.filtered$Ct.Ref))
error=10^(-((M_BQ*M_C + Alt1_BQ*Alt1_C  + Alt2_BQ*Alt2_C  + R_BQ*R_C)/(M_C+Alt1_C+Alt2_C+R_C))/10)
}
error
x<-cbind(x.filtered,error)
R<-as.numeric(as.character(x.filtered$Ct.Ref))
M<-as.numeric(as.character(x.filtered$Ct.Alt))
X1<-as.numeric(as.character(x.filtered$Ct.Alt1))
X2<-as.numeric(as.character(x.filtered$Ct.Alt2))
pi0=1-dim(x.filtered)[1]/dim(bam_input)[1]
theta=as.numeric(as.character(x.filtered$AF))
f0<-get.f0(x =x.filtered ,what.error = error )
f1<-get.f1(x =x.filtered,theta =theta,what.error =error )
LFDRs<-(pi0*f0)/(pi0*f0+(1-pi0)*f1)
Mutant=ifelse(LFDRs>LFDR.T,0,1)
output=cbind(x.filtered,LFDRs,Mutant)
LFDRs
pi0
x.filtered
dim(bam_input)[1]
pi0=1-dim(x.filtered)[1]/dim(A)[1]
pi0
pi0=1-dim(x.filtered)[1]/dim(A)[1]
theta=as.numeric(as.character(x.filtered$AF))
f0<-get.f0(x =x.filtered ,what.error = error )
f1<-get.f1(x =x.filtered,theta =theta,what.error =error )
LFDRs<-(pi0*f0)/(pi0*f0+(1-pi0)*f1)
Mutant=ifelse(LFDRs>LFDR.T,0,1)
output=cbind(x.filtered,LFDRs,Mutant)
output
LFDRs
output
bam_path <- system.file("extdata", "bam_input.csv", package="LFDRSNV")
bam_path
calls_path <- system.file("extdata", "calls.vcf", package="LFDRSNV")
calls_path
calls_path <- system.file("extdata", "calls.vcf", package="LFDRSNV")
calls_path
calls_path='/Users/alikarimnezhad/Downloads/analysis/mutect2/TDNA1_filtered.vcf'
bam_input
calls
LFDR.T
error
error=NULL
error
if (is.null(LFDR.T)){LFDR.T=0.01}
A=utils::read.csv(bam_input,sep="\t",quote = "\"",header=F,stringsAsFactors = F)
colnames(A)[1:2]=c('CHR','POS')
B=utils::read.table(calls,fill = T)
colnames(B)[1:2]=c('CHR','POS')
A0=NULL
u=unique(B$CHR)
for (i in u){
A0=rbind(A0,A[A$CHR==i & A$POS%in%B[B$CHR==i,]$POS,])
}
if(dim(A0)[1]==0){print('no CHR and postion no. was found in bam_input')}
A=read.table('/Users/alikarimnezhad/Downloads/analysis/bam-readcount/TDNA24e.txt',fill = T)
#A=read.csv('/Users/alikarimnezhad/Documents/Bioinformatics-OHRI/Scientific Reports/Code/LFDRSNV/inst/extdata/bam_input.csv',sep="\t",quote = "\"",header=F,stringsAsFactors = F)
head(A)
A=read.csv('/Users/alikarimnezhad/Documents/Bioinformatics-OHRI/Scientific Reports/Code/LFDRSNV/inst/extdata/bam_input.csv',sep="\t",quote = "\"",header=F,stringsAsFactors = F)
A
head(A)
bam_path <- system.file("extdata", "bam_input.csv", package="LFDRSNV")
bam_path <- system.file("extdata", "bam_input.csv", package="LFDRSNV")
bam_path
calls_path <- system.file("extdata", "calls.vcf", package="LFDRSNV")
system.file("extdata", "calls.vcf", package="LFDRSNV")
B=read.table('/Users/alikarimnezhad/Documents/Bioinformatics-OHRI/Scientific Reports/Package/SNVLFDR/inst/extdata/calls.vcf',fill = T)
B
colnames(B)[1:2]=c('CHR','POS')
head(B)
A0=NULL
u=unique(B$CHR)
for (i in u){
A0=rbind(A0,A[A$CHR==i & A$POS%in%B$POS,])
}
dim(A0)
A=read.csv('/Users/alikarimnezhad/Documents/Bioinformatics-OHRI/Scientific Reports/Code/LFDRSNV/inst/extdata/bam_input.csv',sep="\t",quote = "\"",header=F,stringsAsFactors = F)
head(A)
colnames(A)[1:2]=c('CHR','POS')
calls_path='/Users/alikarimnezhad/Downloads/analysis/mutect2/TDNA1_filtered.vcf'
B=read.table('/Users/alikarimnezhad/Documents/Bioinformatics-OHRI/Scientific Reports/Package/SNVLFDR/inst/extdata/calls.vcf',fill = T)
colnames(B)[1:2]=c('CHR','POS')
head(B)
A0=NULL
u=unique(B$CHR)
for (i in u){
A0=rbind(A0,A[A$CHR==i & A$POS%in%B$POS,])
}
dim(A0)
system.file("extdata", "regions.bed", package="LFDRSNV")
calls_path <- system.file("extdata", "calls.vcf", package="SNVLFDR")
calls_path
bam_path <- system.file("extdata", "bam_input.csv", package="SNVLFDR")
bed_path <- system.file("extdata", "regions.bed", package="SNVLFDR")
bed_path
usethis::pr_init("fix/invalid-html5")
library(usethis)
library("usethis")
warning('no CHR and postion no. was found in bam_input')
message("empirical estimation of g(.)")
12.5+3/8*25+9/24*50
